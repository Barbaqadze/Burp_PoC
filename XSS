Cross site Scriptint (XSS)

https://portswigger.net/web-security/cross-site-scripting




Reflected XSS
	Reflected XSS into HTML context with nothing encoded
		Send GET Request with Payload "?search=<script>alert(1)</script>"

--------------------------------------------------------------------------------------

Exploiting cross-site scripting to steal cookies
	Exploiting cross-site scripting to steal cookies
		Comment field contains stored XSS. So send XSS  payload to get other users sessions. Payload location - "/XSS_Payloads/Steal_cookies"


---------------------------------------------------------------------------------------


Exploiting cross-site scripting to capture password
	Exploiting cross-site scripting to capture passwords
		Comment field contains stored XSS. so Send XSS Payload, XMLHttpRequest or Fetch Api request. Payload location - "/XSS_Payloads/Capture_password_payloads"

----------------------------------------------------------------------------------------

Exploiting cross-site scripting to perform CSRF
	Exploiting XSS to perform CSRF
		Comment filed contains stored XSS. so Send XSS payload to Bypass CSRF Token protection. Demo - Steal CSRF Token and send request with stolen CSTF Token.  Payload location - "/XSS_Payloads/Exploiting_XSS_to_perform_CSRF"


----------------------------------------------------------------------------------------







XSS between HTML tags
	
	Stored XSS into HTML context with nothing encoded
		Comment field contains stored XSS. so send XSS Payload that calls alert function. Payload - "<script>onerror=alert;throw 1</script>"
	


	Reflected XSS into HTML context with most tags and attributes blocked
		Search field contains reflected XSS. most of payloads are blocked by WAF. so go to XSS Cheat sheet and copy tags and then run intruder like "<&&>" to determine which tag is allowed. notice that <body> tag is allowed. then determine which event is allowed so copy events from Cheat sheet and run again intruder like "<body%20&&=1> to determine which event is allowed. notice that "onresize" event is allowed so payload would be "<body onresize="print()">". then go to exploit server and store reflected payload with iframe tag like "<iframe src="https://your-lab-id.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>". then view exploit and notice that XSS worked. so deliver exploit to victim.



	Reflected XSS into HTML context with all tags blocked except custom ones
		Search filed contains reflected XSS. Most payloads are blocked except custom ones. Review XSS Cheat sheet and notice that custom payload "<xss>" is allowed. so payload would be "<xss id=x tabindex=1 onfocus=alert(1)></xss>" but it does not work because it doesnot run automatically. current payloads would be like "<xss id=x onfocus=alert(1) tabindex=1>#x". Or second one "<xss style="-webkit-user-modify:read-write" onfocus=alert(1) autofocus>". both are working perfectly for custom tags. then go to exploit server and store "<script>location="{Your reflected Web Address}"</script>" and deliver exploit to victim


	
	Reflected XSS with event handlers and href attributes blocked
		Search field contains XSS. Most of payloads are blocked including href attribute. so go to Cheat sheet and copy tags then run intruder like "<&&>" to determine which tag is allowed. notice that svg and animate tags are allowed so attack with svg animate attack vector. payload would be "<svg><a><animate attributeName=href dur=5s repeatCount=indefinite keytimes=0;0;1 values="https://safe-url?;javascript:alert(1);0" /> id=xss><text x=20 y=20>Click</text></a>". this payload bypass href restriction.



	
	Reflected XSS with some SVG markup allowed
		Search field contains XSS. Most of payloads are blocked except SVG attribute. so go to cheat sheet, filter tags with svg and copy them. run intruder like "<svg><&&" to determine which svg tag is allowed. notice that animatetransform is allowed. so filter cheat sheet with "svg -> animatetransofrm" and use one of above payloads. like "<svg><animatetransform onbegin=alert(1) attributeName=transform>"



-----------------------------------------------------------------------------------------------



XSS in HTML tag attributes


	Reflected XSS into attribute with angle brackets HTML-encoded
		Search field contains XSS and context is into an HTML tag attribute value. so we have to terminate value of the html atribute. to do this use payload like " " autofocus onfocus=alert(document.domain) x=" ".


	Stored XSS into anchor href attribute with double quotes HTML-encoded
		Comment section contains stored XSS. XSS context is into the href attribute. it is possible to execute JavaScript without needing to terminate the href attribute value. payload would be "<a href="javascript:alert(1)">". so enter "javascript:alert(1)" into Website field on the comment section to execute alert.


	Reflected XSS in canonical link tag
		Home page contain "link 'ref=cannical'" tag so it is exploitable. payload - "<link rel="canonical" accesskey="X" onclick="alert(1)" />". so at this point payload would be "https://your-lab-id.web-security-academy.net/?'accesskey='x'onclick='alert(1)". just enter this address via chrome browser.

	

-------------------------------------------------------------------------------------------------



XSS into JavaScript


Terminating the existing script	
	Reflected XSS into a JavaScript string with single quote and backslash escaped
		Search field contains reflected XSS. notice that search input value is handled by javascript variable. it is possible to simply close the script tag that is enclosing the existing JavaScript, and introduce some new HTML tags that will trigger execution of JavaScript. For example payload would be "</script><img src=1 onerror=alert(document.domain)>" which trigger XSS



Breaking out of a JavaScript string
	Reflected XSS into a JavaScript string with angle brackets HTML encoded
		Search field contains refltected XSS. notice that search input is handled by javascript variable. it is possible to break out of the string and execute JavaScript directly. it is essential to repair the script following the XSS context, because any syntax errors there will prevent the whole script from executing. payloads are "'-alert(document.domain)-'" and "';alert(document.domain)//"  they break out strings and execute javascript directly.



	Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped
		Search field contains reflected XSS. notice that search input is handled by javascript variable. Also notice that when we try to break out of the string, Backslash is used.  A backslash before a character tells the JavaScript parser that the character should be interpreted literally, and not as a special character such as a string terminator. At this situation we can use our  own backslash character to neutralize the backslash that is added by the application. so payload would be - "\';alert(document.domain)//" and after subbmit javascript variable will looks like this - "\\';alert(document.domain)//" that means that Backslash is neutrilized,





Making use of HTML-encoding
	Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped
		Comment field contains stored XSS. send request and view source code. Observe that "onclick" event is used and inside event we can modify value with "website" field. so payload would be - "http://&apos;-alert(1)-&apos;". 


XSS in JavaScript template literals
	Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped
		Search field contains reflected XSS. to escape angle brackets, single, and double quotes restriction, use payload "${alert(document.domain)}". 


-----------------------------------------------------------------------------------------------------------



DOM-based XSS



Exploiting DOM XSS with different sources and sinks
	DOM XSS in document.write sink using source location.search
		Search field contains DOM Based XSS. so enter a random alphanumeric string into the search box. right-click and inspect the element, and observe that your random string has been placed inside an img src attribute. Break out of the img attribute by searching for. payload would be " "><img src/onerror=alert(1)>"  or " a">'); document.write('... <script>alert(document.domain)</script> ...');" 


	

	DOM XSS in document.write sink using source location.search inside a select element
		On the product pages, notice that the dangerous JavaScript extracts a "storeId" parameter from the location.search source. It then uses document.write to create a new option in the select element for the stock checker functionality. Add a storeId query parameter to the URL and enter a random alphanumeric string as its value. Request this modified URL. Observe that your random string is now listed as one of the options in the drop-down list. So change URL and insert "storeId" parametter as follows " product?productId=1&storeId=2</select><img src/onerror=alert(1)> " 

	


	DOM XSS in innerHTML sink using source location.search
		Search field contains DOM based XSS. so enter a random alphanumeric string into search box. inspect the element and observe that random alphanumeric string has been placed inside "element.innerHTML = {here}". The innerHTML sink doesn't accept script elements on any modern browser, nor will svg onload events fire. so we have to use alternative elements like img or iframe and Event handlers such as onload and onerror. so payload would be " <img src=1 onerror=alert(1)>" 



DOM XSS in jQuery
	DOM XSS in jQuery anchor href attribute sink using location.search source
		On the Submit feedback page, change the query parameter returnPath to / followed by a random alphanumeric string. Right-click and inspect the element, and observe that your random string has been placed inside an a href attribute. So Change returnPath to " javascript:alert(document.cookie) " and then Hit enter and click "back" button. 




	DOM XSS in jQuery selector sink using a hashchange event
		Inspect element home page and notice that jQuery funtion "hashchange" is used, which is vulnerable. So go to exploit server and put payload - "<iframe src="https://vulnerable-website.com#" onload="this.src+='<img src=1 onerror=print()'">" and then deliver this exploit to victim. 



DOM XSS in AngularJS
	DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded
		Inspect element home page and notice that "<body ng-app>" is used. When a site uses the "ng-app" attribute on an HTML element, it will be processed by AngularJS. in this case, AngularJS will execute JavaScript inside double curly braces that can occur directly in HTML or inside attributes. To test if AngularJS is vulnerable, enter payload into website search field like = "1+2={{1+2}}". if this payload return "1+2=3", so site is vulneravble because double curly braces can execute javascript. then go to XSS cheat sheet and view "DOM based AngularJS sandbox escapes" payloads. lets test first one and put payload into search field - "{{constructor.constructor('alert(1)')()}}" and it will execute alert function.	


	

DOM XSS combined with reflected and stored data
	Reflected DOM XSS
		Search field contains reflected XSS. Enter random test string and then notice into intruder that "search-results" is used. From the Site Map, open the searchResults.js file and notice that the JSON response is used with an eval() function call. By experimenting with different search strings, you can identify that the JSON response is escaping quotation marks. However, backslash is not being escaped. To solve this lab, enter the following search term: " \"-alert(1)}// 



	
	Stored DOM XSS
		Comment field contains stored XSS.  In an attempt to prevent XSS, the website uses the JavaScript replace() function to encode angle brackets. However, when the first argument is a string, the function only replaces the first occurrence. We exploit this vulnerability by simply including an extra set of angle brackets at the beginning of the comment. These angle brackets will be encoded, but any subsequent angle brackets will be unaffected, enabling us to effectively bypass the filter and inject HTML. payload : " <><img src=1 onerror=alert(1)> " 


Which sinks can lead to DOM-XSS vulnerabilities?
	document.write()
	document.writeln()
	document.domain
	element.innerHTML
	element.outerHTML
	element.insertAdjacentHTML
	element.onevent"



--------------------------------------------------------------------------------------------------------------------------------------
	



AngularJS sandbox



Constructing an advanced AngularJS sandbox escape
	Reflected XSS with AngularJS sandbox escape without strings
		Search field contains reflected XSS. Go to cheat sheet and search "AngularJS sandbox escapes DOM" and view payloads. notice last one which is "without strings". payload is "toString().constructor.prototype.charAt=[].join; [1,2]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)". but it limits lenghts which is 120. for this we have to add "1&" on the front and "=1" on the end. so payload would be "1&toString().constructor.prototype.charAt=[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1". 


	
Bypassing a CSP with an AngularJS sandbox escape
	Reflected XSS with AngularJS sandbox escape and CSP
		Search field contains reflected XSS. Go to cheat sheet and search "AngularJS CSP Bypass". payload would be "<input id=x ng-focus=$event.path|orderBy:'(z=alert)(document.cookie)'>





--------------------------------------------------------------------------------------------------------------------------------------------



Dangling Markup Injection


Reflected XSS protected by very strict CSP, with dangling markup attack
	Email Change funtion contains XSS. Go to exploit server and enter XSS Pyaload - "Danlging_markup_injection" and deliver to victim. it will steal CSRF token. then use "CSRF PoC Generator" and paste stealed CSRF and then deliver it to victim.




--------------------------------------------------------------------------------------------------------------------------------------------



Content security policy
	

Bypassing CSP with policy injection
	Reflected XSS protected by CSP, with CSP bypass
		Search field contains XSS but the CSP prevents the script from executing. Observe that response contains a Content-Security-Policy header, and the report-uri directive contains a parameter called token. Because you can control the token parameter, you can inject your own CSP directives into the policy. payload would be "<script>alert(1)</script>&token=;script-src-elem 'unsafe-inline'". Using this directive, you can overwrite existing script-src rules enabling you to inject unsafe-inline, which allows you to use inline scripts. 



---------------------------------------------------------------------------------------------------------------------------------------------

 In an HTML context, you should convert non-whitelisted values into HTML entities:

    < converts to: &lt;
    > converts to: &gt;

In a JavaScript string context, non-alphanumeric values should be Unicode-escaped:

    < converts to: \u003c
    > converts to: \u003e







